unit mega65;

@use "DMA"
@use "str"

var RowSize : byte = 40;
	LogicalRowSize : integer;
	screenMB: byte;
	screenB : byte;
	screenaddr : integer;
	s1:^byte;

@donotremove RowSize
@donotremove LogicalRowSize

procedure io_enable();
begin
	POKE(^$d02f,0,$47);
	POKE(^$D02f,0,$53);
	POKE(^$0,0,65);
end;

procedure init();
begin
	asm("
		sei 
		lda #$35
		sta $01
		
		; enable 40 mhz
		lda #$41
		sta $00
		
		; disable C65 ROM
		lda #$70
		sta $d640
		eom
		; unmap C65 rom
		lda #%11111000
		trb $d030
		
		; disable CIA interrupts
		lda $7f
		sta $dc0d
		sta $dd0d
		
		; disable IRQ interrupts
		lda #$00
		sta $d01a
		cli
		
		
	");
end;


procedure setFCM();
begin
	asm("
	 sei
      lda #$35
      sta $01

      ; enable 40Mhz
      lda #$41
      sta $00

      ; enable VIC4
      lda #$00
      tax
      tay
      taz
      map
      eom

      lda #$47
      sta $d02f
      lda #$53
      sta $d02f

      ; disable CIA interrupts
      lda #$7f
      sta $dc0d
      sta $dd0d

      ; disable C65 Rom
      lda #$70
      sta $d640
      eom

      ; disable IRQ raster
      lda #$00
      sta $d01a

      ; Unmap C65 Roms
      lda #%11111000
      trb $d030


      cli

      ;Change VIC2 stuff here to save having to disable hot registers
      lda #%00000111
		  trb $d016

      ; 40 cols
      lda #%10100000		;Clear bit7=40 column, bit5=disable extended attribute
      trb $d031

      ;Setup up FCM 
      lda #%00000101  ;Enable 16 bit char numbers (bit0) and 
		  sta $d054       ;full color for chars>$ff (bit2)
    
      lda #$00
      sta $d020
      sta $d021
		; set double buffer
		lda #%10000000
		trb $D051
	");
	
/*	asm("
		lda #%00000111
		trb $d016
		
		lda #%10100000
		trb $d031
		
		lda #%00000101
		sta $d054
		
		lda #$00
		sta $d020
		sta $d021
		
	");	*/
end;

procedure relocateScreen(b:byte;addr:integer);
var p : pointer;
begin
	screenB := b;
	screenaddr := addr;
	POKE(^$D061,0,addr>>8);
	POKE(^$D060,0,addr&$FF);
	POKE(^$D062,0,b);
end;

procedure SetRowSize(newRowSize:byte);
begin
	RowSize:=newRowSize;
	LogicalRowSize := RowSize*2;
	POKE(^$D05E,0,RowSize);
	POKE(^$D059,0,(LogicalRowSize>>8));
	POKE(^$D058,0,(LogicalRowSize&$FF));
end;

procedure printCharFCM(ch : byte;color:byte;x,y:integer);
var a:integer;
begin
	a := $0000 + x*2 + y*LogicalRowSize;
	DMA::lpoke($00,$05,a,ch);
	a := $0001 + x*2 + y*LogicalRowSize;
	DMA::lpoke($ff,$08,a,color);
end;

procedure printStringFCM(s1 : global ^byte;color1:byte;x1,y1:integer);
var i:byte;
begin
	for i:=0 to str::strlen(s1) do
	begin
		printCharFCM(s1[i],color1,x1+i,y1);
	end;
end;

end.