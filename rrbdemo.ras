/******************************************************************** 
	rrbDemo
	
	demonstrates the use of the Raster Rewrite Buffer
	This program sets up Full Color-Character Mode
	There will be 2 bytes per char on screenmem and colormem,
	this allows us to use more than 256 different chars
	
	This demo is setup to use the memory above $20000 for tile
	definitions (charNums > 2048)
	
	the RRB is build as followed :
	1 Line :
		80 bytes screen chars (tilemap 40 chars * 2 bytes)
		MAXSPRITES*4 byte for RRB Definition
		4 byte termination code for RRB
		
	Screen (MAXSPRITE=30):
		5100 bytes ScreenRam
		5100 bytes ColorRam
		
	Screen Ram is repositioned to $50000
	Color Ram is at $0ff80000
	
	Sprite Data - $1F000
		Sprite Data holds the plain sprite data, currently only 1 sprite
	
	Tile Data - $20000
		Tile Data, first 4 are Transparent,Tile1,Tile2,Tile3
		after num 2052 (4):
			2 Tiles per sprite to allow pixel perfect y positioning
			You can only draw Sprites/Tiles per raster, but if you draw 2
			Tiles underneath each other and copy the SpriteData from $1F000
			with a mod-y-offset to this location the sprite is draw at the
			y position
	
	The RRB.tru is highly depending on lookup tables, this increases Memory usage but it's quiet fast
	
	With FCM (320x200x256 colors) the raster will have time for a 40x25 tilemap and max. 30
	Sprites per row
	This means, you can go up to 750 Sprites per Screen, the rrbIndex of a sprite can't be higher than
	MAXSPRITE!!!
	
	TODO:
		NCM:
		the next things will be NCM mode to increase stuff that can be rendered per row, so
		you can have more Layers of tilemaps and more Sprites per row
		
		FILEIO:
		Implementation of the MEGA65 FileIO to load data into 256MB range
 ******************************************************************** 

 ********************************************************************/

program rrbDemo;


@use "DMA"
@use "RRB"
@use "mega65"
@use "palettes"


var
	sinetable : array[256] of byte = (
		64,117,122,73,15,2,46,106,127,90,29,0,29,90,127,105,45,2,15,73,122,117,63,9,6,55,112,125,81,21,0,38,99,127,97,36,0,22,82,125,111,53,5,10,65,118,121,71,14,2,47,106,127,89,28,0,30,91,127,104,44,2,16,74,122,116,62,9,6,56,113,124,80,20,0,39,100,127,96,35,0,23,84,125,110,52,4,11,66,119,121,70,14,3,48,107,126,88,27,0,31,92,127,103,43,1,17,75,123,116,61,8,7,57,114,124,79,19,1,40,101,127,95,34,0,24,85,126,110,51,4,12,67,119,120,69,13,3,49,108,126,87,26,0,32,93,127,102,42,1,18,76,123,115,60,8,7,58,114,124,78,19,1,41,102,127,94,33,0,25,86,126,109,50,4,12,68,120,120,68,12,4,50,109,126,86,25,0,33,94,127,102,41,1,19,78,124,114,58,7,8,60,115,123,76,18,1,42,102,127,93,32,0,26,87,126,108,49,3,13,69,120,119,67,12,4,51,110,126,85,24,0,34,95,127,101,40,1,19,79,124,114,57,7,8,61,116,123,75,17,1,43,103,127,92,31);
	costable : array[256] of byte = (
		128,98,37,0,22,82,125,112,54,5,10,64,118,122,72,15,2,46,106,127,90,28,0,29,91,127,105,45,2,16,73,122,117,63,9,6,55,112,125,81,21,0,38,99,127,97,36,0,23,83,125,111,53,5,10,65,118,121,71,14,3,47,107,127,89,28,0,30,92,127,104,44,2,16,74,122,116,62,9,6,56,113,124,79,20,0,39,100,127,96,35,0,23,84,126,110,52,4,11,66,119,121,70,13,3,48,107,126,88,27,0,31,93,127,103,43,1,17,76,123,116,60,8,7,58,114,124,78,19,1,40,101,127,95,34,0,24,85,126,109,51,4,12,67,119,120,69,13,3,49,108,126,86,26,0,32,94,127,102,42,1,18,77,123,115,59,7,7,59,115,124,77,18,1,41,102,127,94,33,0,25,86,126,109,50,3,12,68,120,120,68,12,4,50,109,126,85,25,0,33,95,127,101,41,1,19,78,124,114,58,7,8,60,115,123,76,18,1,42,103,127,93,32,0,26,87,126,108,49,3,13,69,120,119,67,11,4,51,110,126,84,24,0,34,96,127,100,39,1,20,79,124,114,57,6,8);
	wobble : array[256] of byte = (
	100,126,129,104,75,69,91,121,131,113,82,68,82,113,131,120,90,69,75,104,129,126,99,72,71,95,124,130,108,78,68,87,117,131,116,86,68,79,109,130,123,94,70,73,100,127,128,103,75,69,91,121,131,112,82,68,83,113,131,120,90,69,76,105,129,126,99,72,71,96,124,130,108,78,68,87,118,131,116,85,68,79,110,130,123,94,70,73,101,127,128,103,75,69,92,121,131,112,81,68,83,114,131,119,89,68,76,105,129,126,98,72,71,96,125,130,107,77,68,88,118,131,115,85,68,80,110,131,123,93,70,74,101,127,128,102,74,69,92,122,131,111,81,68,84,114,131,119,89,68,77,106,129,125,98,72,71,97,125,130,107,77,68,88,119,131,115,84,68,80,111,131,122,93,70,74,102,128,128,102,74,70,93,122,131,111,80,68,84,115,131,119,88,68,77,107,130,125,97,71,72,98,125,129,106,77,68,89,119,131,114,84,68,81,111,131,122,92,69,74,102,128,127,101,74,70,93,123,131,110,80,68,85,115,131,118,88,68,77,107,130,125,96,71,72,98,126,129,105,76,68,89,119,131,114,83);
	
	cindex : byte = 0;


	tile1 : array[64] of byte = (
  $69,$69,$6A,$69,$69,$69,$69,$6A,$69,$69,$69,$69,$69,$6A,$69,$69,$4A,$4A,$4A,$69,$69,$69,$69,$4A,$4B,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A ); 
	tile2 : array[64] of byte = (
  $4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4B,$4A,$4A,$4B,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A,$4A );
	tile3 : array[64] of byte = (
  $6,$6,$7,$7,$7,$7,$6,$6,$6,$7,$9,$9,$9,$9,$7,$6,$7,$9,$9,$9,$9,$5,$5,$7,$7,$9,$9,$9,$5,$5,$5,$7,$7,$9,$9,$5,$5,$5,$5,$7,$7,$9,$9,$5,$5,$5,$5,$7,$6,$7,$5,$5,$5,$5,$7,$6,$6,$6,$7,$7,$7,$7,$6,$6);

	sprite : array[64] of byte = (
	$00,$00,$00,$71,$71,$00,$00,$00,$00,$00,$71,$C8,$C8,$71,$00,$00,$00,$00,$71,$C8,$C8,$71,$00,$00,$00,$00,$00,$71,$71,$00,$00,$00,$E8,$00,$E8,$D4,$D4,$E8,$00,$E8,$00,$E8,$D6,$D4,$D4,$D5,$E8,$00,$00,$E8,$D6,$D4,$D4,$D5,$E8,$00,$00,$00,$E8,$E8,$E8,$E8,$00,$00
	);
	
	tilemap : array[1000] of byte = (
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,2,2,2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,
1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,
2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,1,1,1,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,2,2,2,2,2,
2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,2,
2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,
2,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,3,3,3,3,2,2,2,2,2,
2,2,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
) ;
	
	mapwidth : integer = 40;
	mapheight : integer = 25;
	

	
procedure initTiles();
var	col : byte;
	addr1:integer;
	x : byte;
begin
	addr1 := $0000;

	col := 0;
	for x := 0 to 255 do
	begin
		DMA::lfill($00,$02,addr1,col,64);
		col := col + 1;
		addr1 := addr1 + 64;
	end;	
	addr1 := $0040;
	for col := 0 to 64 do
	begin
		DMA::lpoke($00,$02,addr1+col,tile1[col]);		// 2049 0x801
		DMA::lpoke($00,$02,addr1+64+col,tile2[col]);	// 2050 0x802
		DMA::lpoke($00,$02,addr1+128+col,tile3[col]);	// 2051 0x803
	end;
	
	// Sprites
	addr1 := $0100;
	for x := 0 to 32 do
	begin
		for col := 0 to 64 do
		begin
			DMA::lpoke($00,$02,addr1+col,sprite[col]);
		end;
		addr1 := addr1 + 128;
	end;
end;


procedure CopyData();
var index : integer;
	p : pointer;
	addr : integer;
	x : integer;
	a,b : byte;
begin
	// Copy sprites to $1F000	
	addr := $F000;
		for x := 0 to 64 do
		begin
			for a := 0 to 60 do
			begin
				DMA::lpoke(0,$01,addr+a*128,sprite[x]);
			end;	
			addr := addr + 1;
		end;

	
	// Copy Map to $10000
	addr := $0000;
	p := #tilemap;
	for x := 0 to 1000 do
	begin
		index := p[0] + 2048;
		p := p + 1;
		DMA::poke16($0001,addr,index);
		addr := addr + 2;
	end;
	
	// empty Screen Buffer
	DMA::lfill($00,$01,$2000,$00,5100);
	// empty Color Buffer
	DMA::lfill($00,$01,$4000,$00,5100); 
end;

procedure delay(t : byte);
begin

	asm("
		ldz localVariable_delay_t
	 zl:
	 	ldy localVariable_delay_t
	 yl:
	 	ldx localVariable_delay_t
	 xl:
	 	dex
	 	bne xl
	 	dey 
	 	bne yl
	 	dez
	 	bne zl
	");
end;

var dy : byte;
	sprX : array[30] of integer;
	sprY : array[30] of integer;
	lastRow : array[30] of byte;
	tilenum : array[30] of integer;
	rrbIndex : array[30] of byte;
	tileNumBased : array[30] of integer;
	spta : integer;
	windex : byte;
	d : byte;
	
begin
/*	mega65::io_enable();
	mega65::init();*/
	mega65::setFCM();
	mega65::relocateScreen($05,$0000);	
	
	DMA::lfill($00,$05,$0000,$00,4000);
	DMA::lfill($ff,$08,$0000,$00,4000);
	
	palettes::InitPalette();			
	poke(^$D021,0,22);
	initTiles();
	CopyData();
	

	RRB::setTransparentTile(2048);
	RRB::addTileLayer($01,$0000,40);

	
	RRB::addSpriteLayer(32,$01,$F000);
	RRB::CreateRRB($01,$2000,$01,$4000);
	spta := 2052;
	for dy := 0 to 29 do
	begin

		sprX[dy] := $0000+(20+dy*5);
		sprY[dy] := $0000+100;
		lastRow[dy] := sprY[dy] / 8;
		tilenum[dy] := spta;
		rrbIndex[dy] := dy;
		tileNumBased[dy] := (tilenum[dy]-2048)*64;
		spta := spta+2;
	end;
			
	spta:=100;
	while (1) do
	begin

	asm("
			vsyncloop:
			lda $d012
			cmp #$E0
			bne vsyncloop			
		");

		POKE(^$D020,0,5);

		for dy := 0 to 29 do
		begin
			sprY[dy]:= $0032+sinetable[cindex]; 
			sprX[dy] := spta+costable[cindex];
	
			cindex := cindex + 1;
			RRB::UpdateSprite(tilenum[dy],tileNumBased[dy],lastRow[dy],sprX[dy],sprY[dy],rrbIndex[dy]);
			lastRow[dy] := sprY[dy] / 8;
			

		end;
		spta := wobble[windex];
		d := d + 1;
		if d=5 then
		begin
			d := 0;

			windex := windex + 1;
		end;
		POKE(^$D020,0,0);
		
		
		POKE(^$D020,0,17);
		RRB::UpdateRRB();
		POKE(^$D020,0,0);
	end;
end.	